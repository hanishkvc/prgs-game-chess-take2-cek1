
*************** 20131127_2206

If already Under CHECK
1.0 cb_findbest
1.1. initially evaluates current position/situation
1.2. If check identified flag is set(thro increment).
1.3. List of moves is generated.
1.4. moves_process is called
2.0. moves_process
2.1. Creates a new chessboard with the currently evaluatin move executed.
2.2. cb_findbest called.
3.0. cb_findbest
3.1. evaluates current position
3.2. if still in check flag is incremented
3.3. return telling Error, because the king is still in check.

If entering CHECK, on a new move 
1.0 cb_findbest
1.1. initially evaluates current position/situation
1.2. As no check - flag is Not set (or rather cleared)
1.3. List of moves is generated.
1.4. moves_process is called
2.0. moves_process
2.1. Creates a new chessboard with the currently evaluatin move executed.
2.2. cb_findbest called.
3.0. cb_findbest
3.1. evaluates current position
3.2. As check identified flag is set (thro increment)
3.3. HOWTO IDENTIFY this situation and return with error.

To differentiate between both, may be use curDepth field to return immidiately in 2nd case at 3.0
OR check who is supposed to move next and who is already undercheck and then decide whether to
continue or not.


****** 20131128_0211, 20131129_0243

* Convert the moves being added to sMoves using 2longnot
* Have to add a hash table of seen chess position and evaluation.
* DONE: Add other missing piece moves.
  TODO: Add Special moves like Pawn promotion, Castling and EnPassant.
* DONE: Add logic for diagonal attack cross check.
* May be reduce the points given to indirect attack and protection
  i.e those attacks which are currently blocked, but can get
  activated due to movement of inbetween pieces.
  OR NOT, still not decided. TAKE A CALL after all other features
  have been added and the emergent behaviour checked.
* Update the Eval logics such that they identify true attack
  and protection situations and give more points to them 
  compared to indirect attacks and protections.
* Create a structure for individual moves. ANd use it instead
  of the current string based notation for all engine internal
  purposes.
* Wrt findbest, may be maintain the best and worst move for a given
  position rather than the current best only logic.
  Also may be update the selection logic such that, it selects a
  move which in turn leads to a almost equal best/good move,
  which at the same time keeps the worst score for the selected
  move minimal, if possible.
  i.e let us say if M1 can give best score of 800 and worst of
  200 (depending on what move the opponent plays), while M2 can
  give a best score of 750 and worst of 700, then may be M2 is
  better than M1. (However current logic will select M1 over
  M2 - So this may require to change).
  * May be later add logic to maintain more than 1 best and worst
    moves.
* once the findbest has selected a move, if it is a pawn promotion
  move then may be call findbest again with the choices of the
  pawn becoming a queen,rook,knight,bishop and see which gives
  the best result with a decent search depth. And use this info
  to decide what pawn promotion to use.
* Have to cross check how the findbest depth search and its unwinding 
  is actually playing out. And then may be update the eval returned
  logic for current position such that it gives weightage to the
  standalone eval value of the current position has well as the
  values returned by depth search from that position. -- TOTHINK

  i.e returned eval value of findbest =>
    StandAloneEval+DepthSearchEval.
    OR
    StandAloneEval*0.5+DepthSearchEval
    OR
   
  OR is this redundant and doesn't matter (TOTHINK TOTHINK)
 
* Have to check all eval return values to see it properly matchs
  the WhitePerspective or the SideToMove perspective as required.

* move_process may be a good candidate for multithreading. i.e
  multiple threads can be started which parallely process a
  different possible move for the current board position/situation.

* Increase the depth of search from the current 3 to 4 or 5 and
  see the change in behaviour if any (ideally there should be)
  as well as when the depth is changed to say 10 or 20 or 30 or 50.
  However deeper the depth, lot lot more time the engine will
  take as of now, as there is no Hash based logic to identify
  already seen positions and short circuit the remaining
  depth search.

****** 20131203

* A run with depth of 3 usually takes between few seconds to around 
  50 to 60 seconds.

* A run with depth of 5 takes around 1800-2500 seconds (i.e guessing).
  1918.26 seconds.
  6461K nodes(moves) in Total
  3Kn/sec.

  i.e something like 23 moves per position and inturn 23**5 = 6436343 
  and takes around 30 to 35 minutes to find the best move.

  EXTRAPOLATING from this to a depth of 6, it will have around 148M 
  nodes in Total (i.e 23**6). And may be around 12 hours or so to find 
  the best move.

* Normal version (startpos)
  Depth 5
  1975.42 seconds
  Nodes 5087K
  3Kn/sec

* HashTable based version (startpos)
  Depth 5
  967.20 seconds
  Nodes 1769K
  2Kn/sec

****** 20131204

* HashTable based version (startpos) _0xxx
  Depth 5
  786.20 seconds
  Nodes 1769K
  2Kn/sec

* HashTable based version (startpos) _17xx
  Depth 5
  641.10 seconds
  Nodes 1769K
  3Kn/sec

* HashTable based version (startpos) _1953 
  (eval_tANDp updated for Direct and Indirect)
  Depth 5
  667.24 seconds
  Nodes 1769K
  3Kn/sec

****** 20131205

* The Eval logic was giving equal or almost similar weightage to 
  protection_provided compared to threats_given So the combined 
  effect was that in situations where the logic should have 
  attacked a opponent piece, instead it was moving pieces around 
  which gives it a percieved better eval because it inturn was 
  giving a  large protection value.

  HOWEVER 
  1. as currently the logic doesn't calibrate the protection value 
     looking at the attacks on the given peice i.e before deciding 
     how much weightage to give to that protection.
 
  2. And also as a piece under a single attack requires 2 pieces 
     protecting it in the worst case and 1 more protecting piece
     than the number of opposing attacking pieces. 

  The weightage has been tuned such that protection weightage is
  only half of the threat weightage.
 
* HashTable based version with rebalanced weightages (startpos) 
  (eval_tANDp updated for Direct and Indirect)
  Depth 5
  248.06 seconds
  Nodes 1769K
  7Kn/sec

  298.57s(6Kn/sec)

TODO:NEXT:
* Add support for pawn promotion. After thinking thro it
  rather than adding it at the end of findbest during
  unwinding. Better to add it during move generation
  for pawns, if it is found that the pawn will go into
  the final rank on the opposite side. So automatically
  the remaining calculations will kick in wrt finding
  the right candidate move of pawn promotion for the 
  given position.
  
  NOTE: If added at unwind time, one would have had to 
  call the findbest again there as a special case to find
  which of the 4 possible pawn promotion possibilities
  would have been the best one.

* Also check how castle info is passed thro and add
  support for same.

* Maybe add a mixed depth search logic, where
  First N steps of the depth, do a full search
  over all the valid moves and for depths beyond
  that N, do a selective depth search for another
  M steps.
  This selective depth search, will only select
  few of the most/more positive, 
  few of the most/more negative and 
  few of the inbetween/middle (~0) moves.
  May be between 6 to 9 moves.

  i.e say (20-40)**5+9**6+3**12

* Use tsearch or hsearch or equivalent for HashTables
  and inturn see the performance impact if any

******* 20131205

* Updating program so that it doesn't send info messages to
  UCI gui, for curDepth==MaxDepth; leads to the engine
  result speeding up almost 4 to 6 times. MOST PROBABLY
  because it used to sync these messages, and because
  there are hell lot of moves at the MaxDepth level.

  Depth 5
  87.25 seconds
  Nodes 1769K
  20Kn/sec

  (Remove logging of Leaf move infos)
  Depth 5
  37.58 seconds
  Nodes 1769K
  47Kn/sec

* Have cut out most of the debug log messages from the
  NON Debug version of the program.

* Found that as HashTable logic had not accounted for 
  the curDepth it was short circuiting evals wrt depth
  search which it shouldn't have. i.e A PositionEval
  at curDepth=5 (which is just a position immidiate eval
  and not depth search based temporal eval if maxDepth
  is 5) was for example short circuiting / bypassing a 
  eval for the same Position but at curDepth=2, which 
  would have allowed temporal/depth search based eval of 
  that position till the allowed maxDepth. This BUG was
  found when doing searchs with maxDepth=6. As it was
  finding BestMoves of only 2 moves instead of 6 moves.

  So updated HashTable logic to account for it.

******* 20131206 (As Expected)

* Have just confirmed that the current simple and stupid
  HashTable logic which I have implemented using a linear
  search based logic is killing performance like hell.

  Originally all the debug messages and verbose uci info 
  messages with syncing was eating up most of the time 
  and thus even thou the linear search based HashTable
  was inefficient it was still leading to a overall
  faster logic, as it was killing out lot of depth searchs
  for positions which repeat themselve across different
  move sequences and inturn these costly sync based
  messages.

  However once the debug logs and info messages were
  eliminated for the normal Non debug version of the
  program, the linear search became the cultprit wrt
  eating time. And going back to the normal non HT
  based logic showed a speed increase of 15 to 30 
  times.

  i.e node or move searches went from 10-20 Kn/sec to
  ~300Kn/sec. 

  NOTE that with the Non HT version of the program the
  The Nodes/Moves searched has increased from the earlier 
  1M-30M range to 30-100M range.

  So what this has showed (as expected) is that 

  1. HashTable has the potential to greatly cut out moves
  to search, due to repeated positions across moves.

  2. However till a better HashTable logic is implemented 
  which actually uses pure Hash based searching or btree or 
  so, the current linear search based semi HashTable is
  killing performance [Atleast at depth of 5, HAVETOCHECK
  what is the impact for depth of 6 and more]

TOCHECK:FIXME: Also found that there is some corner case 
in the hash based logic, which is leading to HTVALMISMATCH 
counter being hit, which ideally shouldn't occur normally. 
This has be be debugged for the HT version of the program, 
independent of the better HT search logic.

FIXME:2: Have also found as always suspected that it is
better to send score cp wrt the original sideToMove rather
than the current sideToMove in the middle of a depth search
because, even when in the middle of a depth search, we will
be looking at as well as sending uci info messages wrt
moves starting from the original starting position with the 
original sideToMove till the depth searched or till maxDepth
(as part of unwinding). - FIXED (20131206_1206)


FIXME: The value of the king to be potentially tweaked wrt
normal cases other than under checkmate as well as special
case of identifying a possible check on the king. Because
otherwise currently finding that pieces blindly sacrifice
themselves in the hope of checking (not checking mating)
the opponents king. HAVE TO THINK THIS MORE.

FIXME: Also has previously captured, I have to update the
best move identification logic during unwinding. Currently
it blindly identifies the most value giving/gaining move
for a given position based on future possible moves. However
may be I have to check what is the best and the worst value
I can end up in a given position based on possible opponent
moves and then identify a move which maximises the possible
profit, while parallely minimising the possible loss. HAVE
TO THINK THIS MORE.

NOTE: A nice set of defines to help debug move selection logic
NORM_ADDOPTS = -DDEBUG_UNWINDSUMMARYPRINT -DDEBUG_UNWIND_SELECTION -DDEBUG_EVALSUMMARYPRINT
This reduces the speed by atleast ~100KN/sec, but worth it
for debugging issues with move selection logic.

*********************** 20131211

* As there is different weightage related to direct threat and indirect threat.
  THere should be different weightage related to whether a protection is required
  or not (depending on the piece being protected needs that protection or not).
  The current direct and indirect protection logic should have a lower weightage
  than this context based protection required or not based calculation. TOTHINK

* Also wrt InDirect weightage, the farther/more pieces inbetween - less should be
  the points/weightage given.


********************** 20181012

Relooking at this logic after almost 5 years, so dont remember things
correctly now

fastmtab is the version to run, if I am not wrong, out of all the
different versions and their options which I am compiling

fastmtabxg is the debug version of the same potentially

Also I stopped looking at the logic, when I was about to do a major
refactoring of the logic at that time. A part of which I had started then.
So it is in a kind of trishanku swarga i.e neither here nor there kind of
mess now. And I have forgotten the intricacies of the logic now and the
thought with which I had started that refactoring.

NOT SURE if I had refactored out that qfindbest to help with identify
danger to king in a better way or to evaluate the last board position
in a depth first search in a better way or a combination or ... now
stupid me, why I stopped spending time on it then !!!!!!
